---
title: "Data"
author: "Caleb Skinner"
format: pdf
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  comment = "#", fig.height = 3, 
  cache = FALSE,  collapse = TRUE,
  error = TRUE, echo = FALSE,
  message = FALSE
)
```

```{r libraries, include = FALSE}
library("arrow")
library("here")
library("scales")
library("flextable")
library("tidyverse"); theme_set(theme_minimal())
library("tidymodels")
```

```{r include = FALSE}
set_flextable_defaults(
  font.size = 10, theme_fun = theme_apa,
  padding = 6,
  background.color = "#EFEFEF")
```

```{r include = FALSE}
gs <- read_parquet(here("grandslams2.parquet"))
```

# Acquiring Data

In order to assess the trends of momentum over the course of a match, we required detailed point-by-point data of a large number of tennis matches. While tennis is iterative and governed by relatively simple scoring, certain unique conditions can only occur a few times in each match. A large number of matches permits us to test the effects of several of these circumstances.

Each year, there are hundreds of professional tennis tournaments awarding millions of dollars in prize money. Yet, the pinnacle of the tennis calendar falls in four Grand Slam events. These four tournaments -- the Australian Open (held in January), French Open (May), Wimbledon (July), and US Open (September) -- offer players the most ranking points, publicity, prize money, and prestige. Players always have incentive to exert effort towards victory, but the incentives are never higher than in the Grand Slams (Crespo et al., 2003). Accordingly, players structure their complex schedules of training, recovery, and competition in order to maximize their performance at these four events. For these reasons, the Grand Slam events serve as the ideal grounds for empirical studies of momentum. Grand Slam events are relatively rare and valuable, so all players should be motivation to put forth substantial effort regardless of their financial situation. Moreover, Grand Slam events possess significantly more resources and content than smaller tournaments. The Grand Slam events each partner with tracking services like IBM or Infosys. This allows for accurate and detailed information of each point.

We acquired point-by-point tennis data from Jeff Sackmann's GitHub page titled "Grand Slam Point-by-Point Data, 2011-present" (Sackmann, 2024). He scraped the data "from the four Grand Slam websites shortly after each event." We used data from both mens and womens singles matches from all four Grand Slams. In 2018, the Australian Open and French Open shifted their partnership from IBM to Infosys. Infosys tracks points differently and has fewer features. This complicates the integration of the data, so we chose to only include matches from the Australian Open and French Open from 2011-2017. For whatever reason, another 202 matches lacked pre-match betting odds. After removing these from our total, this includes 7715 matches and over 1.40 million points.

IBM tracks several useful calculations for each point. Some of the important variables include elapsed time, serve speed, rally length, distance run, serve depth, and return depth. Not all courts, however, have been equipped to calculate all of these complex measurements. In general, the most recent tournaments and later rounds have much more complete measuring systems.

The point-by-point data for each match lacked important biological and competitive player level information. Each player carries unique tendencies, strategies, and skill levels into a match. These traits are difficult to quantify, but they can impact the changes of momentum in a match. Perhaps most importantly, a strong player could secure a long streak of victories over a weaker player simply because he or she is a superior player (Page & Coates, 2017). Thus, without an appropriate adjustment for skill level, an analysis of momentum can falsely attribute positive momentum to a player that is simply more skillful than his or her opponent. An adjacent page of Jeff Sackmann's GitHub begins to resolve this issue by presenting basic information of each player at the moment of every match. Among other factors, this page links a player's ranking, height, handedness, and age at the time of each tournament to each match. A player's ranking provides a rough- but often inaccurate- estimate of his or her skill level entering a match. A player's ranking is composed of his or her success on the professional tour in the past twelve months. The ranking does not account for the proximity of success, the skill level of previous opponents, or the closeness of matches. In other words, a dominant victory against a top player two weeks prior can be weighted the same as a close victory over a weak player 11 months ago. The ranking can also be slow to react to developments like injuries and age. These inconsistencies allow for luck- or misfortune- to inhibit a players' ranking from representing their skill level.

A more accurate estimate for the skill level of each player is the match's pre-match betting odds. The match's betting odds is a pre-match assessment of both player's likelihood of victory. Sportsbooks have the resources to develop highly advanced predictive models, and they have the incentives to react to recent results and developments much faster than a player's ranking. For strategic and personal reasons, certain players perform better on different tournaments. Betting odds can account for these nuances. We acquired the pre-match betting odds for each match from Tennis Data (Tennis Data, 2024). Tennis Data features betting odds from two different sportsbooks: Bet365 and Pinnacles Sports. We added both to our data set.

# Major Transformations

The point-by-point data came as 106 csv files, and the betting odds data came as 78 csv files. Much of the data wrangling and transformations with the data involved combining the files and integrating different measuring methods. We cleaned the variable names and joined all the data sets into one. In the end, we had one data set on a point level full with information about the match (betting odds) and information about each player (age, height, handedness, etc.). All transformations and computations are performed in R (R Core Team, 2024) and with additional R packages. The data set follows Hadley Wickham's tidy data format (Wickham & Grolemund, 2017).

It is worth noting that many of the player's names in each file contained different spellings. These spellings often changed from year to year at the same source. Well known American tennis player Coco Gauff, for example, is also addressed as Cori Gauff in one file. Overall, the data included 110 name discrepancies. To resolve these problems, we synthesized the names into one spelling. Each match included one or two extra empty observations at the beginning of each match. They did not include any extra information, so we removed them from our data. Moreover, the 2016 US Open calculated the players' distance run in feet, while all other tournaments use meters. We converted the 2016 US Open into meters.

Second, we made several important variable transformations. Initially, the variables containing the score-line for each observation contained the score after the point had been played. We shifted these results back, so that each observations' score-line now holds the score before the point is played. Here is a hypothetical example. After the second point of a match, the score is 30-0 and after the third point the score is 40-0. We transformed the data, so that the third point will display 30-0, because those are the scoring conditions in which the third point is played. At the exact moment that the players are competing in the third point, the score is still 30-0. This same processed was emulated for the game score and set score.

We also created several important indicator variables. The **tiebreak** indicator variable holds a value of 1 when a tiebreak is currently being played. This is important, because tiebreaks follow a very different structure than the rest of play. Tiebreaks are also found to have a disproportional effect on momentum (Page & Coates, 2017). The retired indicator variable holds a value of 1 when either player leaves a match early. Typically, this comes with an injury or disqualification. These matches are not complete, so they could provide tricky for our analysis. The retired indicator variable provides a mechanism for quickly identifying such matches. The **game_victor** and **set_victor** indicator variables hold values of 1 at the point where a player wins a game or set, respectively. Moments like these hold an outsized weight in a tennis match. They are both markers of progress and potential catalysts for momentum.

One of the most important moments in match are a player's chances to win a game on his or her opponent's serve (Klaasen & Magnus, 2001). The indicator variables **p1_break_pt**, **break_converted** and **break_saved** describe these chances. **P1_break_pt** holds a value of 1 when player 1 has a chance to win a game while player 2 serves. In other words, if player 1 wins that point, he will "break" player 2's serve. **Break_converted** holds a value of 1 when the returner breaks the opponent's serve or "converts" the break point opportunity. Conversely, **break_saved** holds a value of 1 when the server wins a break point or "saves" the break point. In general, break point chances are abnormally influential points. These indicator variables provide us the opportunity to analyze the impact of both converting or saving a break point.

We derived two variables related to the time of a match. The **interruption** indicator variable holds a value of 1 for the point after any natural interruption of play. Players rest after the conclusion of a set, and after the third, fifth, seventh, ninth, and eleventh games of a set. The **change_ends** indicator variable holds a value of 1 for the point after players switch ends of the court. Players change ends after every interruption and after the first game of the set. Players also change ends after the sixth, twelfth, eighteenth, etc. points in a tiebreak.

The computation of backward and future momentum naturally creates missing observations at the beginning and end of each match. For this reason, we removed the first and last few points for each match. These points are likely to hold more variable measurements of momentum, so this loss is not significant. This reduces our data set to 1.36 million points.

# Faulty Data

In general, IBM's data collection methods produced very little noticeable missing or inaccurate observations. Yet, some courts were able to track more variables than others. In most cases, the data converted the missing variables into NA values. For select matches, however, the **distance_run**, **rally_count**, and **speed_mph** variables held values of 0 instead of NA. This disrupts many important numerical calculations. We converted these 0 values into NAs.

Missing observations in the data set are rare, but they typically have a disproportional impact, because they disrupt the scoring of the entire match. In most cases, if an observation is skipped, then the measuring system's scoring will continue to calculate the score of the match as if the point never occurred. This can lead to odd mistakes, where the measuring system shows that two players have a completely different score line than in reality. Our data included 21 matches that contained a missing point that disrupted the scoring. We could have chosen to fix these scoring errors, but given the abundance of our data, we chose to remove them from the data set. 17 of the 21 faulty matches came from the French Open. Every French Open tournament from 2011 to 2015 included at least one faulty match.

Several other matches included missing observations in the middle of the match that did not disrupt the overall scoring. These matches had an observation that was full of NA values for every variable. After some thought, we chose to remove these matches as well. While usable, these matches contain a disruption in the analysis. There are enough other matches to account for these lost matches. Overall, 41 matches were lost an observation in the middle of the match. 38 of these matches came from the French Open. Each other tournament is represented once. 22 of the 41 faulty matches came from the 2014 French Open. We also removed an additional match from the 2011 Australian Open, because a player retired after only seven points.

Occasionally, the measuring system stopped tracking a match's data before the conclusion of the match. We verified that these matches were not the player retirements referenced earlier. 39 matches did not include the final point, and we flagged them as "incomplete." We chose to retain both incomplete matches and matches with player retirements, because they still contain long uninterrupted sequences of points.

Lastly, the data collection methods arbitrarily labeled the players as "player 1" and player 2". They made these designations by the order the players were listed in the tournaments bracket. At first, this seems to make little difference. However, due to the format of these tournaments, the number 1 seeded player will always be listed as player 1 and the number 2 seeded player will always be listed as player 2. While there are no major differences in the overall descriptive results between player 1 and player 2 (player 1 won 50.1% of points, 50.2% of sets, and 50.6% of matches), we thought it prudent to randomize the designation of player 1 and player 2.

# Description of Covariates

There are several important variables that may impact momentum. We have divided these covariates into three categories: *structural* covariates, *catalytic* covariates, and *reducing* covariates. Structural covariates define the structure and natural conditions of a match. These are the rules under which the players play. Catalytic covariates are events within a match that we hypothesize spark momentum. Reducing covariates are events or rules that can slow or reset momentum.

## Structural Covariates

The structural covariates define the normal conditions of play. As a rule, any variable that directly impacts a players' probability of winning a point for the entire duration of a match, regardless of the score, is structural. Important structural variables include **server**, **sex**, **bet_odds**, and **tournament**. One of the difficulties in momentum literature is isolating momentum effect from a mere asymmetry in player skill (Meier et al., 2020). These structural covariates help control for the non-momentum forces that impact a match.

### Server

One of the most powerful shots in the game of tennis is the serve. Players alternate service games and they hold a large advantage while serving. Over the course of our data, players won 61.41% of points while serving and 74.78% of the games while serving. The indicator variable **server** holds a value of 1 when player 1 serves and 0 when player 2 serves.

```{r}
#| label: fig-server-win-percentage
#| fig-cap: "Server Effect"
gs %>% group_by(server) %>%
  summarise(
    sw_point = sum(server == point_victor),
    rw_point = sum(server != point_victor),
    sw_game = sum(server == game_victor & tiebreak == 0),
    rw_game = sum(server != game_victor & game_victor != 0 & tiebreak == 0)) %>%
  summarise(
    Points = sum(sw_point)/(sum(rw_point)+sum(sw_point)),
    Games = sum(sw_game)/(sum(rw_game)+sum(sw_game))) %>%
  t() %>% as.data.frame() %>% rownames_to_column() %>%
  rename("stat" = "rowname",
         "prop" = "V1") %>%
  ggplot() +
  geom_bar(aes(x = reorder(stat, prop), y = prop, fill = stat), stat = "identity") +
  labs(y = "", x = "", title = "Server's Win Percentage") +
  scale_y_continuous(labels = scales::percent) +
  theme(legend.position="none") +
  coord_cartesian(ylim = c(.4, .8))
```

### Tournament

Each of the four Grand Slams hold different characteristics that affect the player's style of play. The surface of the court and common weather conditions can cause the same stroke to travel at different speeds and spin rates. Generally, the conditions at Wimbledon are fastest and those at the French Open are slowest. However, these exact conditions vary from year to year. They are even impacted by the time of day. As seen in @fig-server-by-tournament, these conditions most noticeably impact the players' dominance on the serve.

```{r}
#| label: fig-server-by-tournament
#| fig-cap: "Tournament Impact"
gs %>% group_by(tournament) %>%
  summarise(
    sw_point = sum(server == point_victor),
    rw_point = sum(server != point_victor),
    sw_game = sum(server == game_victor & tiebreak == 0),
    rw_game = sum(server != game_victor & game_victor != 0 & tiebreak == 0)) %>%
  mutate(
    tournament = str_remove(tournament, "open"),
    tournament = str_replace(tournament, "aus", "australian"),
    tournament = str_to_title(tournament),
    tournament = str_replace(tournament, "Us", "US")) %>%
  rowwise() %>%
  transmute(
    tournament = factor(tournament, levels = c("Australian", "French", "Wimbledon", "US")),
    Points = sum(sw_point)/(sum(rw_point)+sum(sw_point)),
    Games = sum(sw_game)/(sum(rw_game)+sum(sw_game))) %>%
  pivot_longer(cols = c(Points, Games), names_to = "stat", values_to = "prop") %>%
  ggplot() +
  geom_bar(aes(x = tournament, y = prop, fill = stat), stat = "identity", position = position_dodge2(reverse = TRUE)) +
  labs(y = "", x = "", title = "Server's Win Percentage by Tournament") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_discrete(name = "", breaks = c("Points", "Games")) +
  coord_cartesian(ylim = c(.5, .8))
```

These changes in conditions lead to a slightly different overall style of play. @tbl-tournament displays  descriptive statistics of the styles of play at the tournaments. Rallies are shorter at Wimbledon. Serve speeds and winners are higher at Wimbledon and lower at the French Open. We will use the categorical variable **tournament** to describe this condition.

```{r}
#| label: tbl-tournament
#| tbl-cap: "Tournament Style of Play"
gs %>% group_by(tournament) %>%
  mutate(first_serve = if_else(serve_no == 1, speed_mph, NA),
         second_serve = if_else(serve_no == 2, speed_mph, NA),
         tournament = factor(tournament, levels = c("ausopen", "frenchopen", "wimbledon", "usopen"))
         ) %>%
  summarise(
    "Rally Length" = mean(rally_count, na.rm = TRUE),
    "First Serve Speed" = mean(first_serve, na.rm = TRUE),
    "Second Serve Speed" = mean(second_serve, na.rm = TRUE),
    "Ace Rate" = percent((sum(p1_ace == 1) + sum(p2_ace == 1))/n(), accuracy = .01),
    "Winner Rate" = percent((sum(p1_winner == 1) + sum(p2_winner == 1))/n(), accuracy = .01)) %>%
  mutate(
    across(where(is.numeric), ~round(.x, digits = 2)),
    tournament = recode(tournament,
                        "ausopen" = "Australian Open",
                        "frenchopen" = "French Open",
                        "usopen" = "US Open",
                        "wimbledon" = "Wimbledon")) %>%
  rename("Tournament" = "tournament") %>%
  flextable() %>%
  align(align = "center", part = "all") %>%
  width(j = 1, width = 1.2) %>%
  width(j = c(2:6), width = 1.05)
```

### Sex

In general, the structural aspects of men's and women's tennis are very similar. In the Grand Slams, men play a best-of-five set match while women play a best-of-three set match. Otherwise, the conditions are exactly same. Still, this small difference impacts our study of trends in momentum over time. Men play more points over the course of a match, so there are more opportunities to observe changes in momentum. Men play an average of 221.6 points per match and women play an average of 139.9 points per match. Thus, while 49.1% of our data set are women's matches (3885 matches), only 37.8% of the points are played by women (543284 points). @fig-match-length displays the match length density of men's and women's matches.

```{r}
#| label: fig-match-length
#| fig-cap: "Match Length"
# density plot
gs %>% filter(match_pt == 1) %>%
  select(sex, point_no, match_id) %>%
  group_by(sex) %>% 
  ggplot() +
  geom_density(aes(x = point_no, group = sex, color = factor(sex))) +
  labs(x = "", y = "", title = "Match Length by Sex", color = "Sex") +
  scale_color_discrete(name = "", labels = c("Women", "Men")) +
  coord_cartesian(xlim = c(0,500))

# points per match
# gs %>% filter(match_pt == 1) %>%
#   select(sex, point_no, match_id) %>%
#   group_by(sex) %>%
#   summarise(
#     points_mean = mean(point_no))
# 
# # observations
# gs %>% select(sex) %>%
#   group_by(sex) %>% summarise(count = n()) %>% mutate(
#     perc = count/sum(count))
```

While the rules are nearly identical, the characteristics of the men's and women's games differ in the relative dominance of the serve. Men tend to win a higher proportion of points while serving than women. Women still have an advantage on their serve, but it is much lower. The indicator variable **sex** holds a value of 0 in women's matches and 1 in men's matches.

```{r}
#| label: fig-server-sex
#| fig-cap: "Server Effect by Sex"
gs %>% group_by(sex) %>%
  summarise(
    sw_point = sum(server == point_victor),
    rw_point = sum(server != point_victor),
    sw_game = sum(server == game_victor & tiebreak == 0),
    rw_game = sum(server != game_victor & game_victor != 0 & tiebreak == 0)) %>%
  rowwise() %>%
  transmute(
    sex = recode(sex, "0" = "Women", "1" = "Men"),
    Points = sum(sw_point)/(sum(rw_point)+sum(sw_point)),
    Games = sum(sw_game)/(sum(rw_game)+sum(sw_game))) %>%
  pivot_longer(cols = c(Points, Games), names_to = "stat", values_to = "prop") %>%
  ggplot() +
  geom_bar(aes(x = sex, y = prop, fill = stat), stat = "identity", position = position_dodge2(reverse = TRUE)) +
  labs(y = "", x = "", title = "Server's Win Percentage by Sex") +
  scale_y_continuous(labels = scales::percent) +
  scale_fill_discrete(name = "", breaks = c("Points", "Games")) +
  coord_cartesian(ylim = c(.5, .8))
```

### Betting Odds

Pre-match betting odds are maintained by several sportsbooks for all Grand Slam tennis matches. We selected two sportsbooks, Bet365 and Pinnacle Sports, that employ the European (Decimal) Odds method. Their format is relatively simple. The decimal odds is the value a better receives for a \$1 bet. A better wagering \$100 on a match with decimal odds at 1.01 wins \$101 for a \$1 profit, while a better wagering \$100 on a match with decimal odds at 2.00 wins \$200 for a \$100 profit. Thus, small decimal odds are safe bets on likely winners and large decimal odds are risky bets on unlikely winners.

Fortunately, decimal odds are also easily transformed into an implied probability percentage between 0 and 1 with the equation:

$$\displaystyle \text{implied probability} = \frac{1}{\text{decimal odds}} * 100$$

Sportsbooks have a strong incentive to precisely adjust their betting odds to reflect realistic pre-match win probabilities, so it is safe to assume that the betting odds represent the two players' known strength entering a match. Literature has shown that pre-game betting odds in the National Football League are exceedingly strong predictors of the eventual outcome (Song, Boulier, & Stekler, 2007). Easton & Uylangco (2010) extend these results to professional tennis and conclude that betting markets are highly efficient.

We perform three logistic regressions (Hosmer, Lemeshow, & Sturdivant, 2013) to compare the predictive power of Bet 365's betting odds, Pinnacle Sport's betting odds, and the player's rankings the outcome of the matches in our data set. In total, the data includes 7711 matches (51.58% men) across 39 tournaments. In order to coerce the data into a symmetric distribution, we transform both decimal odds into an implied win probability for player 1. Both betting odds predictors are converted to implied win probability percentages. There is no natural way to convert the two players' rankings into an implied win probability, so we transform the two players' rankings into the difference between player 1 and player 2's. That is, if player 1 is ranked 1 and player 2 is ranked 30, the variable would hold a value of -29.

```{r, include = FALSE}
bet_analysis <- gs %>% filter(match_pt == 1) %>%
  select(match_id, match_victor, ranking1, ranking2, ps_1, ps_2, b365_1, b365_2) %>%
  mutate(
    match_victor = factor(if_else(match_victor == 2, 0, match_victor)),
    rank_diff = ranking1 - ranking2,
    ps_1_prob = (1/ps_1)*100,
    ps_2_prob = (1/ps_2)*100,
    b365_1_prob = (1/b365_1)*100,
    b365_2_prob = (1/b365_2)*100,
    ps_sum = ps_1_prob + ps_2_prob,
    b365_sum = b365_1_prob + b365_2_prob,
    ps_1_prob = (ps_1_prob * 100)/ps_sum,
    ps_2_prob = (ps_2_prob * 100)/ps_sum,
    b365_1_prob = (b365_1_prob * 100)/b365_sum,
    b365_2_prob = (b365_2_prob * 100)/b365_sum) %>%
  filter(!is.na(ps_1), !is.na(b365_1), !is.na(rank_diff))

lr_mod <- logistic_reg() %>%
  set_engine("glm")

bet_fit <- lr_mod %>%
  fit(match_victor ~ b365_1_prob, data = bet_analysis)

# predict
bet_pred <- predict(bet_fit, new_data = bet_analysis %>% select(-match_victor), type = "prob")

# 7738 AIC
bet_fit

ps_fit <- lr_mod %>%
  fit(match_victor ~ ps_1_prob, data = bet_analysis)

ps_pred <- predict(ps_fit, new_data = bet_analysis %>% select(-match_victor), type = "prob")

# 7730 AIC
ps_fit

ranking_fit <- lr_mod %>%
  fit(match_victor ~ rank_diff, data = bet_analysis)

ranking_pred <- predict(ranking_fit, new_data = bet_analysis %>% select(-match_victor), type = "prob")

# 9411 AIC
ranking_fit

# bind_cols(bet_pred, ps_pred, ranking_pred, bet_analysis %>% select(match_victor)) %>%
#   rename(
#     bet = ".pred_0...1",
#     ps = ".pred_0...3",
#     rank = ".pred_0...5") %>%
#   select(bet, ps, rank, match_victor) %>%
#   mutate(
#     bet_correct = if_else(match_victor == 1, bet, 1-bet),
#     ps_correct = if_else(match_victor == 1, ps, 1-ps),
#     rank_correct = if_else(match_victor == 1, rank, 1-rank)) %>%
#   filter(!is.na(bet)) %>%
#   summarise(
#     bet = sum(bet_correct),
#     ps = sum(ps_correct),
#     rank = sum(rank_correct))

# bet_analysis %>%
#   pivot_longer(cols = c(ps_1_prob, b365_1_prob, rank_diff), names_to = "type", values_to = "values") %>%
#   filter(type != "rank_diff") %>%
#   ggplot() +
#   geom_density(aes(x = values, color = type))

# bet_analysis %>%
#   ggplot() +
#   geom_histogram(aes(x = ps_1_prob, fill = match_victor), binwidth = .02)
# 
# bet_analysis %>%
#   ggplot() +
#   geom_histogram(aes(x = b365_1_prob, fill = match_victor), binwidth = .02)
# 
# bet_analysis %>% filter(abs(rank_diff)<500) %>%
#   ggplot() +
#   geom_histogram(aes(x = rank_diff, fill = match_victor), binwidth = 10)
```

```{r}
#| label: tbl-bet-odds
#| tbl-cap: "Betting Log Odds"
combined <- bind_rows(bet_fit %>% tidy(), ps_fit %>% tidy(), ranking_fit %>% tidy()) %>%
  slice(2,4,6) %>%
  select(estimate, std.error) %>%
  rename(
    "Standard Error" = std.error,
    "Log Odds" = estimate) %>%
  mutate(
    `Log Odds` = round(`Log Odds`, digits = 3),
    Predictors = c("Bet365", "Pinnacle Sports", "Ranking"),
    AIC = round(c(bet_fit$fit$aic, ps_fit$fit$aic, ranking_fit$fit$aic), digits = 0),
    `2.5% OR` = round(exp(`Log Odds` - 1.96 * `Standard Error`), digits = 3),
    `Odds Ratio` = round(exp(`Log Odds`), digits = 3),
    `97.5% OR` = round(exp(`Log Odds` + 1.96 * `Standard Error`), digits = 3)) %>%
  relocate(Predictors, .before = `Log Odds`) %>%
  relocate(AIC, .before = `Log Odds`) %>%
  select(-`Standard Error`)

combined %>% flextable() %>%
  align(align = "center", part = "all") %>% 
  width(j = c(3:6), width = 1) %>%
  width(j = 1, width = 1.3)
```

The **match victor** outcome variable is modeled in three logistic regressions, each containing one predictor. We then compare the Akaike Information Criterion (AIC) Score of each model to assess which of the three predictors fits the data best. We display the results of the three models in @tbl-bet-odds. The model using Pinnacle Sports' betting odds has the lowest AIC, so we will use it for our analysis. Henceforth, the betting odds of the match will refer to Pinnacle Sports' betting odds. The odds ratios interpretations are helpful for understanding the predictive power of the betting odds. A 1 percent point increase in Bet365's betting odds suggests a 5.7% increase in the odds of match victory. Conversely, a 1 percent point increase in Pinnacle Sport's betting odds suggests a 5.5% increase in the odds of victory. The difference in players' ranking is the least predictive of victory, but a 1 position increase in ranking (i.e. a worse ranking) lowers the estimated odds of victory by 1.1%. From AIC scores, it is clear that the player rankings are a much worse predictor of the victor of the match.

@fig-implied-probability displays the density of Pinnacle Sports' implied win probability values for player 1. The curve appears to be generally uniform, with fewer observations in the extreme values. Interestingly, there are fewer matches with both players entering with an even win probability. In most matches, the betting odds tend to strongly favor one player.

```{r}
#| label: fig-implied-probability
#| fig-cap: "Pinnacle Sports Implied Probability Density"
# density plot

bet_analysis %>% ggplot() +
  geom_density(aes(x = ps_1_prob), color = "cadetblue4") +
  labs(x = "Implied Win Probablity")
```

## Catalytic and Reducing Covariates

The catalytic covariates are potential catalysts of momentum. We hypothesize that these influential and memorable moments in a match provide a boost to players. These variables are events that have important characteristics or memorable results. In contrast, reducing covariates can include breaks in play that may disrupt natural flows of momentum. We define and describe several of these covariates below.

### Break Converted

Converting a break point is one of the keys to winning a match (Klaasen & Magnus, 2001). It has been found to cause positive momentum for the breaking player (Meier et al., 2020). The average match has 17 break chances and 7.1 converted break points. The indicator variable **break_converted** holds a value of 1 the point a break occurs and a value of 0 otherwise.

```{r}
#| label: fig-breaks
#| fig-caption: "Breaks per Match"

gs %>% group_by(match_id) %>%
  summarise(
    break_converted = sum(p1_break_pt_won + p2_break_pt_won),
    #break_saved = sum(p1_break_pt_missed + p2_break_pt_missed),
    break_chances = sum(p1_break_pt + p2_break_pt)) %>%
  pivot_longer(cols = c(break_converted,# break_saved,
                        break_chances), names_to = "type", values_to = "value") %>%
  # group_by(type) %>%
  # summarise(
  #   mean = mean(value))
  ggplot() +
  geom_density(aes(x = value, color = type)) +
  scale_color_discrete(name = "", breaks = c("break_converted", #"break_saved",
                                             "break_chances"), labels = c("Converted",# "Saved",
                                                                                                            "Chances")) +
  coord_cartesian(xlim = c(0,40)) +
  labs(title = "Breaks per Match", x = "Points", y = "")
```

### Break Saved

Each time a player misses an opportunity to convert a break point, his or her opponent successfully saves a break point. While saving a break point does not lead to a positional or strategic advantage, we hypothesize that it could cause a recurring psychological advantage. Servers save break points about 58.19% of the time. This is notably less than their overall win rate on serve (61.14%) (@fig-break-pt-win). The indicator variable **break_saved** holds a value of 1 if a player saves a break point and a value of 0 otherwise.

```{r}
#| label: fig-break-pt-win
#| fig-cap: "Break Point Win Rate"

save_rate <- gs %>% filter(p1_break_pt == 1 | p2_break_pt == 1) %>%
  group_by(server) %>%
  summarise(
    conversion = sum(p1_break_pt == 1 & p1_break_pt_won == 1) + sum(p2_break_pt == 1 & p2_break_pt_won == 1),
    saved = sum(p1_break_pt == 1 & p1_break_pt_missed == 1) + sum(p2_break_pt == 1 & p2_break_pt_missed == 1),
    total = n()
  ) %>%
  summarise(
    conversion = sum(conversion),
    saved = sum(saved),
    total = sum(total)) %>%
  transmute(
    save_rate = saved/total
  ) %>% pull()

gs %>% group_by(server) %>%
  summarise(
    sw_point = sum(server == point_victor),
    rw_point = sum(server != point_victor)) %>%
  summarise(
    "Server Win Rate" = sum(sw_point)/(sum(rw_point) + sum(sw_point))) %>%
  t() %>% as.data.frame() %>% rownames_to_column() %>%
  rename("stat" = "rowname",
         "prop" = "V1") %>%
  add_row(stat = "Break Point Save Rate", prop = save_rate) %>%
  ggplot() +
  geom_bar(aes(x = reorder(stat, prop), y = prop, fill = stat), stat = "identity") +
  labs(y = "", x = "", title = "") +
  scale_y_continuous(labels = scales::percent) +
  theme(legend.position="none") +
  coord_cartesian(ylim = c(.5, .7))
```

### Tiebreak Victory

If two players are tied after twelve games of play in a set, they will enter into a tiebreak. Like break chances, tiebreaks have an asymmetric impact on the outcome of a tennis match. Winning a tiebreak can award a significant momentum effect on the rest of a match (Page & Coates, 2017). Tiebreaks are relatively uncommon; only 14.11% of sets end in a tiebreak. The average length of a tiebreak is 11.85 points.

```{r}
#| label: fig-tiebreak-length
#| fig-cap: "Tiebreak Length"

gs %>% group_by(match_id, set_no) %>%
  summarise(
    tiebreak_points = sum(tiebreak)
  ) %>%
  filter(tiebreak_points !=0) %>% 
  ungroup() %>%
  ggplot() +
  geom_histogram(aes(x = tiebreak_points, after_stat(density)), position = "identity", binwidth = 1, fill = "darkgreen") +
  coord_cartesian(xlim = c(4, 25)) +
  labs(title = "Tiebreak Length", y = "", x = "")
```

The variable **tiebreak_victory** holds a value of 1 if player 1 wins a tiebreak, 2 if player 2 wins a tiebreak, and 0 otherwise.

### Point Outcomes

At the simplest level, a point always ends with a victor and a loser. However, the path of each point can differ greatly, and the covariates **ace**, **winner**, **double fault**, and **unforced error** help to capture several basic point outcomes. An ace is a serve left untouched by the returner. We hypothesize that this dominating shot may spark momentum. Similarly, a winner is a rally shot left untouched by the opponent. Many different types of points end with a winner, but they are often powerful and emotional shots. An ace is a type of winner. Conversely, a server double faults when they miss their serve twice in one point. This weak result is often frustrating for players. An unforced error is rally shot that a player misses by their own mistake and not by the skill of their opponent. A double fault is a type of unforced error. All four of these covariates are indicators variables for both player 1 and player 2. We use the prefix **p1_** to denote player 1 and **p2_** to denote player 2 for all such indicator variables.

### Point Length

Not all tennis points are equal. Some last a few shots and players exert very little energy, while others are more grueling rallies that cost players significant amounts of energy. We hypothesize that as players exert more mental and physical energy during a single point, the point becomes more impactful.

One method to measure the length of the point is by the number of shots in a point. The covariate **rally_length** adds up the total number of shots in a single point. In general, serves and made shots qualify but errors do not. A double fault (server misses serve) is a 0 shot rally and an unreturned serve qualifies as a 1 shot rally. A point with a serve, three completed shots, and an error has a rally length of 5 shots. The average rally length is 3.53 shots, but 67% of rallies are three shots or fewer.

The two players' distance run during a point is a second measure of the mental and physical energy exerted on a given point. **Distance_run** is measured in meters and is generally correlated with **rally_count**. In @fig-accuracy, we display the relationship between the total distance run by rally count. The scatterplot shows that there are some accuracy issues with both variables. If **rally_count** is 0, then the distance run should also be close to 0. It is unlikely for the distance run to be close to 0 if the rally count is large. Perhaps most concerning is the cluster of points with rally lengths of 3-5 and distance runs over 100. The majority of these observations came from the US Open in 2021 and Wimbledon in 2021 and 2023.

```{r}
#| label: fig-accuracy
#| fig-cap: "Point Length Accuracy"
# US Open year 2021, Wimbledon 2023, 2021
gs %>%
  filter(!is.na(rally_count), !is.na(p1_distance_run), !is.na(p2_distance_run)) %>%
  mutate(
    total_distance_run = p1_distance_run + p2_distance_run) %>%
  ggplot() +
  geom_point(aes(x = rally_count, y = total_distance_run), size = 1, color = "darkgreen", alpha = .25) +
  scale_x_continuous(breaks = c(0,10,20,30,40, 50)) +
  labs(x = "Rally Length", y = "Distance Run")
```

For this reason, we choose the create the indicator variable **long_point** as a combination of the two measurements of a point's length. Long points are defined as points where the total distance run between the two players exceeds 60 meters (12.2% of points) or the rally length of the point exceeds 6 shots (14.4% of points). A continuous covariate would likely perform better, but the insufficient data forces this transformation. By reducing the information in **rally_length** and **distance_run** to a single indicator variable, we assume that long points tend to have the same impact on a player regardless of the structure of the point. This assumption holds, because, in general, we see that the distance run of the two players in a point is highly related. The average distance run by the server is 14.48 meters and the average distance run by the returner is 16.07 meters. The density is displayed in @fig-distance-run.

```{r, warning = FALSE}
#| label: fig-distance-run
#| fig-cap: "Server and Returner Distance Run"

gs %>%
  filter(!is.na(p1_distance_run), !is.na(p2_distance_run)) %>%
  ungroup() %>%
  transmute(
    Server = if_else(server == 1, p1_distance_run, p2_distance_run),
    Returner = if_else(server == 1, p2_distance_run, p1_distance_run)) %>%
  pivot_longer(cols = c(Server, Returner), names_to = "player", values_to = "distance") %>%
  ggplot() +
  geom_density(aes(x = distance, color = player)) +
  scale_x_continuous(limits = c(0, 75)) +
  scale_color_discrete(name = "", breaks = c("Server", "Returner")) +
  labs(y = "", title = "Distance Run per Point", x = "Distance (meters)")

# average distance run
# gs %>%
#   filter(!is.na(p1_distance_run), !is.na(p2_distance_run)) %>%
#   ungroup() %>%
#   transmute(
#     Server = if_else(server == 1, p1_distance_run, p2_distance_run),
#     Returner = if_else(server == 1, p2_distance_run, p1_distance_run)) %>%
#   summarise(
#     mean(Server),
#     mean(Returner)
#   )
```

### Interruption

In the standard structure of a tennis match, players are afforded regular breaks from play. The players rest for approximately 90 seconds after the third, fifth, seventh, ninth, and eleventh games of a set. Injury timeouts typically take place during these natural interruptions. Players are also given a rest of 120 seconds after the conclusion of each set. In some tournaments, after the conclusion of the second set, players may choose to leave the courts for the locker room during a longer 10 minute break. Outside of these breaks, the play is relatively continuous. Players are encouraged to begin a point within 25 seconds of the conclusion of the previous point. In recent years, tournaments have employed serve clocks to lessen stoppage of play. 

We are interested in interruptions in play, because there is empirical evidence that interruptions reduce the effects of catalysts of momentum (Meier et al., 2020). Interruptions are a natural part of play, so the number of interruptions in a match is highly correlated with the number of points in a match. Longer matches have more interruptions and shorter matches have fewer. On average, there are 12.54 interruptions per match. The indicator variable **interruption** holds a value of 1 the point following an interruption and a value of 0 otherwise.

```{r}
#| label: fig-interruptions
#| fig-cap: "Interruptions"

gs %>% group_by(match_id) %>%
  summarise(
    int = sum(interruption),
    points = n()) %>%
  ggplot() +
  geom_point(aes(x = points, y = int), color = "darkgreen") +
  labs(title = "Interruptions and Points per Match", x = "Total Points", y = "Interruptions")

# gs %>% group_by(match_id) %>%
#   summarise(
#     int = sum(interruption)) %>%
#   summarise(
#     mean(int)
#   )
```

### Change Ends

Players also regularly switch sides of the court. The typically switch during interruptions, but they also switch after the conclusion of the first game of a set and the sixth, twelfth, eighteenth, etc. games in a tiebreak. Players are permitted to drink and refresh, but are not allowed to sit down. Thus, these situations can serve as miniature interruptions.

We are interested in comparing the impact between players changing sides of the court and a full interruption. The two covariates are highly related and have bimodal distributions. This is directly related to the contrasting structure of men's and women's tennis. Women's matches tend to be shorter, so most women's matches are located in the first peak. Conversely, men's matches are longer and are typically contained within the second peak. On average, there are 16.48 change of ends per match. The indicator variable **change_ends** holds a value of 1 the point following all of change of ends (including interruptions) and a value of 0 otherwise.

```{r}
#| label: fig-interruptions-change
#| fig-cap: "Change of Ends"

gs %>% group_by(match_id) %>%
  summarise(
    interruption = sum(interruption),
    change_ends = sum(change_ends)) %>%
  ungroup() %>%
  pivot_longer(cols = c(interruption, change_ends), names_to = "type", values_to = "freq") %>%
  ggplot() +
  geom_density(aes(x = freq, color = type)) +
  labs(title = "Interruptions and Change of Ends Frequency", x = "", y = "") +
  scale_color_discrete(name = "", labels = c("Change Ends", "Interruptions"))

# gs %>% group_by(match_id) %>%
#   summarise(
#     ch = sum(change_ends)) %>%
#   summarise(
#     mean(ch)
#   )
```